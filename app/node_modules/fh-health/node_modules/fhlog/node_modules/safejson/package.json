{
  "name": "safejson",
  "version": "1.0.1",
  "description": "Safely parse and stringify JSON using node style callbacks.",
  "main": "./src/index.js",
  "scripts": {
    "test": "mocha --ui bdd"
  },
  "issues": "https://github.com/evanshortiss/safejson/issues",
  "homepage": "https://github.com/evanshortiss/safejson",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/evanshortiss/safejson.git"
  },
  "keywords": [
    "safe",
    "json",
    "async",
    "parse",
    "stringify"
  ],
  "testling": {
    "harness": "mocha-bdd",
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/4..latest",
      "opera/11.0..latest",
      "iphone/6..latest",
      "ipad/6..latest",
      "android-browser/latest"
    ]
  },
  "author": {
    "name": "Evan Shortiss"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "1.18.2",
    "browserify": "~4.1.5",
    "grunt": "~0.4.5",
    "grunt-browserify": "~2.1.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-mocha-test": "~0.10.2"
  },
  "readme": "safejson\n===\n\nConcise library to parse and stringify JSON without the need for try catch. \nSimply use the standard Node.js pattern of providing parameters and a \ncallback that takes an error as the first parameter and result as the second.\n\nThis library is nice for chaining operations using async as demonstrated below.\n\n## Browser Support\nPretty much any browser with JSON support.\n[![browser support](https://ci.testling.com/evanshortiss/safejson.png)\n](https://ci.testling.com/evanshortiss/safejson)\n\n## Install\n\n```\nnpm install safejson --save\n```\n\n```\nbower install safejson --save\n```\n\n## Example with Async\n```javascript\n\nvar safejson = require('safejson')\n  , async = require('async')\n  , fs = require('fs');\n\nexports.updateFile = function (callback) {\n  async.waterfall([\n    readFile,\n    safejson.parse,\n    doUpdate,\n    safejson.stringify,\n    writeFile\n  ], callback); \n}\n\n```\n\n## Example (Parse)\n\n```javascript\n// Valid JSON object that will stringify\nvar VALID_OBJECT = {\n  name: 'evan',\n  age: 23\n};\n\nvar VALID_JSON_STRING = JSON.stringify(VALID_OBJECT);\n\n\nsafejson.parse(VALID_JSON_STRING, function(err, json) {\n  // err is null as no error would have occured due to valid input\n  // json is a valid JSON object\n});\n\n```\n\n## Example (Stringify)\n```javascript\n// Valid JSON object that will stringify\nvar VALID_OBJECT = {\n  name: 'evan',\n  age: 23\n};\n\n// Invalid JSON object, has a circular reference added below\nvar CIRCULAR_OBJECT = {\n  name: 'evan',\n  age: 23\n};\nCIRCULAR_OBJECT.cref = CIRCULAR_OBJECT;\n\nsafejson.stringify(VALID_OBJECT, function(err, json) {\n  // err would be null as the object is valid json\n  // json is a valid json string\n});\n\nsafejson.stringify(CIRCULAR_OBJECT, function(err, str) {\n  // err would be defined as the object contained a circular reference\n  // str would equal null\n});\n\n```\n\n\n## Configs\n#### safejson.defer = {Boolean}\nIf true the parsing of JSON will be briefly deffered. This uses \nprocess.nextTick in Node.js and the appropriate browser shim \n(setTimeout for example) where necessary.\n\n## Methods\n#### safejson.stringify(value[, replacer [, space]], callback)\nDoes the job of JSON.stringify but handles exceptions for you. Supports all the \nusual JSON.stringify parameters, including the optional *replacer* and \n*spaces*. The last parameter must always be a callback function and is not \noptional.\n\n#### safejson.parse(str[, reviver], callback)\nDoes the job of JSON.parse but handles exceptions for you. Supports all the \nusual JSON.parse parameters. The last parameter must always be a callback \nfunction and is not optional.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/evanshortiss/safejson/issues"
  },
  "_id": "safejson@1.0.1",
  "_shasum": "5bcbb9533b96fce10e6356f420017c16a4f9c998",
  "_resolved": "https://registry.npmjs.org/safejson/-/safejson-1.0.1.tgz",
  "_from": "safejson@>=1.0.0 <1.1.0"
}
