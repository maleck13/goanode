{
  "name": "fhlog",
  "version": "0.12.1",
  "description": "Simple and flexible logger for the browser and Node.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "main": "./lib/LoggerFactory.js",
  "author": {
    "name": "Evan Shortiss"
  },
  "license": "MIT",
  "devDependencies": {
    "browserify": "~4.1.8",
    "mocha": "~1.20.1",
    "lintspaces-cli": "0.0.3",
    "jshint": "~2.5.2",
    "linelint": "0.0.3",
    "brfs": "~1.2.0",
    "karma": "^0.12.16",
    "karma-chrome-launcher": "^0.1.4",
    "karma-mocha": "^0.1.4",
    "karma-mocha-reporter": "^0.2.7",
    "karma-firefox-launcher": "~0.1.3"
  },
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/evanshortiss/logger.git"
  },
  "browser": {
    "colors/safe": "./lib/BrowserColors.js",
    "./lib/transport/console.js": "./lib/transport/console-browser.js",
    "./lib/fileSystem/index.js": "./lib/fileSystem/browser-filesystem.js"
  },
  "testling": {
    "harness": "mocha-bdd",
    "files": "./test/**/*.js",
    "browsers": [
      "ie/8..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/4..latest",
      "opera/11.0..latest",
      "iphone/6..latest",
      "ipad/6..latest",
      "android-browser/latest"
    ]
  },
  "dependencies": {
    "safejson": "~1.0.0",
    "colors": "~1.0.3",
    "lodash": "~2.4.1",
    "moment": "~2.8.4",
    "async": "~0.9.0",
    "html5-fs": "0.0.1",
    "brfs": "~1.2.0",
    "xtend": "~4.0.0"
  },
  "readme": "fhlog\n======\n\nAnother loggging library!? Yes. But this one is different. It's written with \nboth the client and server in mind. It has the same API when runnning on the \nclient or server (Node.js), supports being _required_ in Node/Browserified \napps, and also can be installed using Bower; great news if you want to use the \nsame log library on both the client and server! It's also possible to use with \nAngularJS' dependency injection.\n\n## Sample Code\n```javascript\n\nvar Logger = require('fhlog'); // May also use window.fhlog\n\nLogger.init({\n\tmeta: {\n\t\tdeviceId: '123321123321'\n\t}\n}, function (err) {\n\n\tif (err) {\n\t\t// Custom logic to handle it\n\t}\n\n\t// Create a logger for \"Stats\" component and set the level to DEBUG\n\tvar stats = Logger.getLogger('Stats', {\n\t    level: Logger.LEVELS.DBG,\n\t    // upload: true/false - Should these be uploaded?\n\t    // silent: true/false - Silence all output from this logger?\n\t});\n\n\t// Log levels\n\tstats.debug('I\\'ll log at DEBUG level!');\n\tstats.info('I\\'ll log at INFO level!');\n\tstats.warn('I\\'ll log at WARN level!');\n\tstats.error('I\\'ll log at ERROR level!');\n\n\t// Setting a logger level\n\tstats.setLogLevel(Logger.LEVELS.WARN);\n\n\tstats.d('I won\\'t be written to console/stdout. My level is too low.');\n\tstats.i('I won\\'t be written to console/stdout either!');\n\tstats.w('I\\'ll log at WARN level!');\n\tstats.e('I\\'ll log at ERROR level!');\n\n\t// Getters / Setters\n\tstats.getName() // returns 'Stats'\n\tstats.setName('New Name!') // You probably won't need to use this really\n\n\tstats.setLogLevel(Logger.LEVELS.DBG);\n\tvar curLvl = stats.getLogLevel();\n\tstats.info('My log level is %d', curLvl);\n\n});\n\n```\n\n## Sample Output\nIf we run the above example the following output is generated.\n\n```\n\n2014-10-01T17:27:57.188Z DBG Stats: I'll log at DEBUG level!\n2014-10-01T17:27:57.197Z INF Stats: I'll log at INFO level!\n2014-10-01T17:27:57.197Z WRN Stats: I'll log at WARN level!\n2014-10-01T17:27:57.197Z ERR Stats: I'll log at ERROR level!\n2014-10-01T17:27:57.198Z WRN Stats: I'll log at WARN level!\n2014-10-01T17:27:57.198Z ERR Stats: I'll log at ERROR level!\n2014-10-01T17:27:57.198Z INF New Name!: My log level is 0\n\n```\n\n## Using with Angular\nWorks just like it usually does, but can be injected as a service instance into \nother components. Just add it as a dependency of your module.\n\n```javascript\nangular.module('MyApp', ['fhlog']);\n\nangular.module('MyApp').service('Heroes', function (fhlog) {\n\tvar log = fhlog.getLogger('Heroes Service');\n\n\tvar heroes = ['Batman', 'Spiderman', 'Thor'];\n\n\tthis.get = function () {\n\t\tlog.d('Getting heroes!');\n\t\treturn heroes;\n\t};\n})\n```\n\n## Uploading Logs to a Server\nThis feature is not thoroughly tested yet, so be mindful of that. \nCurrently it will only work on Chrome, Opera and Cordova applications that \nsupport the FileSystem API.\n\nLogs can easily be uploaded to a server. Just call the _init_ method on the \nLogger and set an _uploadFn_. This function must accept a string parameter and \na callback you need to call once the upload process completes or fails. \nThe callback function takes a single parameter, an error, if one occured. \nAn example is below.\n\n```javascript\n\nfunction myUploadFn (jsonLogArray, callback) {\n\t// Do your upload logic...\n\tif (uploadError) {\n\t\tcallback(uploadError);\n\t} else {\n\t\tcallback(null);\n\t}\n}\n\n// Initialise the logger with an upload function\nLogger.init({\n\tuploadFn: myUploadFn\n})\n\n// Anything logged using this logger will be uploaded\n// if its logged using INF or higher, they'll also be written\n// to the terminal/console\nLogger.getLogger('Stats', {\n\tlevel: Logger.LEVELS.INF\n\tupload: true,\n\tsilent: false\n});\n\n\n```\n\n## API\n\n### LoggerFactory\nThis is the primary interface exposed when you _require_ this module, or on the \n_window.fhlog_ object if you're not using Browserify or Node.js.\n\n##### setDefault(key, val)\nSet a default value to use for a paramter when getting a logger. For example \nyou might want all loggers to not use colours so you could do this.\n\n```javascript\nvar fhlog = require('fhlog');\n\nfhlog.setDefault('colourise', false);\n```\n\n##### LEVELS\nExposes a way to set log levels. Contains the following keys for use as shown \nin previous examples.\n\n* DBG\n* INF\n* WRN\n* ERR\n\n##### meta\nAn interface to set/get/remove/replace data in the metadata included with \neach log upload. Check out the Meta section below for more info/\n\n##### init(opts, callback)\nInitialise the LoggerFactory (fhlog). You don't need to call this at present \nbut it is highly recomended that you do. The options object passed can \ncontain:\n\n* meta - Extra data to upload with each log, e.g a uqique device ID or \nusername. This must be an object.\n* uploadFn - A function that will handle uploading the JSON string of logs.\n* storageQuota - The amount of bytes allocated to store log data. This will \ngradually fill up as you use Logger instances that have the _upload_ flag set \nto _true_ but will also decrease as these logs are uploaded.\n\n```javascript\nvar Logger = require('fhlog');\n\nLogger.init({\n\tuploadFn: myUploadFn,\n\tmeta: {\n\t\tdeviceId: '123321123321'\n\t},\n\tstroageQuota: 50 * Math.pow(1024, 3) // 50MB of logs can be stored\n});\n\n```\n\n##### setGlobalLevel(level)\nSet all loggers to the provided level.\n\n##### get/getLogger(name, opts)\nGet a logger prefixed with the given _name_. Valid options for the _opts_ are:\n\n* level - Defaults to _LEVELS.DBG_.\n* upload - Defaults to _false_.\n* silent - Defaults to _false_.\n* colourise - Defaults to _true_. Colours don't work in the browser so this is \nignored.\n\n\n### Meta\nMeta stores data that will be included with each log message that's uploaded. \nFor example a device ID or the username that is current logged in. It shouldn't \nbe used to hold large payloads and should be strictly minimal metadata.\n\nMeta is a JSON object so it contains key pair data. All added data must be \nvalid serialisable JSON as it will be stringified for upload.\n\n##### get(key)\nGet the value stored in metadata for _key_;\n\n##### set(key, val)\nStore the value _val_ in metadata under the given _key_.\n\n##### remove(key)\nRemove the metadata stored for key.\n\n##### replace(obj)\nReplace everything in metadata with the provided Object _obj_. This can be an \nempty object. This will throw an exception if the object is not serialisable.\n\n\n### Logger\nLogger instances are returned by _LoggerFactory.getLogger_ \n(or _window.fhlog.getLogger_).\n\n##### LEVELS\nThe levels the Logger can be set to. Same as _LoggerFactory.LEVELS_\n\n##### setSilent(Boolean)\nSet this Logger to suppress printing logs to th _console_ or _stdout/sterr_\n\n##### isSilent()\nDetect if this Logger is silent or not. Returns a Boolean\n\n##### debug(str[, args]) / d(str[, args])\nPrint a log at DBG level. Works like regular console.debug.\n\n##### info(str[, args]) / i(str[, args])\nPrint a log at INF level. Works like regular console.info.\n\n##### warn(str[, args]) / w(str[, args])\nPrint a log at WRN level. Works like regular console.warn.\n\n##### error(str[, args]) / e(str[, args])\nPrint a log at ERR level. Works like regular console.error.\n\n##### err(str)\nShorthand for the _error_ method. *Deprecated*.\n\n##### setLogLevel(LogLevel)\nSet the level of this logger.\n\n##### getLogLevel(str)\nGet the level of this logger.\n\n##### getName(str)\nGet the name of this logger.\n\n##### setName(str)\nSet the name of this logger.\n\n\n## Contributing\nContributions are always welcome! There is no formal style guide, just follow \nthe style already present in the codebase and be sure to run the tests.\n\nRunning the tests will execute them in the Chrome browser and Node.js. You need \nto accept a FileSystem storage request during this time in Chrome.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/evanshortiss/logger/issues"
  },
  "homepage": "https://github.com/evanshortiss/logger#readme",
  "_id": "fhlog@0.12.1",
  "_shasum": "1cccc645397fe41e4bc9a5700093728ef187bb16",
  "_resolved": "https://registry.npmjs.org/fhlog/-/fhlog-0.12.1.tgz",
  "_from": "fhlog@>=0.12.1 <0.13.0"
}
